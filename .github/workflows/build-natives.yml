name: Build native dependencies (Lua)

env:
    LUA_VERSION: 5.1.5 # Make sure this matches the version mentioned in the description in the .nuspec file.

on:
    pull_request:
    workflow_call:
    workflow_dispatch:

permissions:
    contents: read

jobs:
    windows:
        name: Windows (x86 + x64)
        runs-on: ubuntu-20.04
        steps:
            - name: Setup Dependencies
              run: |
                mkdir -p artifacts/x86
                mkdir artifacts/x64
                sudo apt-get install mingw-w64

            - name: Compile natives
              run: |
                curl -s -L -O https://www.lua.org/ftp/lua-${LUA_VERSION}.tar.gz
                tar xf lua-${LUA_VERSION}.tar.gz
                cd lua-${LUA_VERSION}/src/
                make mingw CC=i686-w64-mingw32-gcc
                cp lua51.dll ../../artifacts/x86/
                make clean
                make mingw CC=x86_64-w64-mingw32-gcc
                cp lua51.dll ../../artifacts/x64/

            - name: Upload Artifacts
              uses: actions/upload-artifact@v3
              with:
                name: Natives-Windows
                path: ./artifacts

    macos:
        name: macOS (x64 + arm64)
        runs-on: macos-11
        steps:
            - name: Clone Repository
              uses: actions/checkout@v3

            - name: Setup Dependencies
              run: |
                mkdir -p artifacts/x86_64
                mkdir artifacts/arm64

            - name: Compile natives
              run: |
                curl -s -L -O https://www.lua.org/ftp/lua-${LUA_VERSION}.tar.gz
                tar xf lua-${LUA_VERSION}.tar.gz
                cd lua-${LUA_VERSION}/src/
                patch < ../../liblua.macos.patch
                make liblua.5.1.dylib CC="clang -target x86_64-apple-macos10.11" LD="clang -target x86_64-apple-macos10.11"
                cp liblua.${LUA_VERSION}.dylib ../../artifacts/x86_64/lua51.dylib
                make clean
                make liblua.5.1.dylib CC="clang -target arm64-apple-macos10.15" LD="clang -target arm64-apple-macos10.15"
                cp liblua.${LUA_VERSION}.dylib ../../artifacts/arm64/lua51.dylib

            - name: Upload Artifacts
              uses: actions/upload-artifact@v3
              with:
                name: Natives-MacOS
                path: ./artifacts

    # Note: Running inside a CentOS container because we want to compile using a version of glibc
    # that is as old as reasonably possible to ensure backwards compatibility of the compiled binaries.
    linux-x64:
        name: Linux (x64)
        runs-on: ubuntu-22.04
        container: centos:centos7
        steps:
            - name: Clone repository
              uses: actions/checkout@v3

            - name: Setup Dependencies
              run: |
                mkdir -p artifacts/x64
                yum -y install gcc make patch

            - name: Compile natives
              run: |
                curl -s -L -O https://www.lua.org/ftp/lua-${LUA_VERSION}.tar.gz
                tar xf lua-${LUA_VERSION}.tar.gz
                cd lua-${LUA_VERSION}/src/
                patch < ../../liblua.linux.patch
                make liblua.so
                cp liblua.so ../../artifacts/x64/lua51.so

            - name: Upload Artifacts
              uses: actions/upload-artifact@v3
              with:
                name: Natives-Linux(x64)
                path: ./artifacts

    # Note: Using the run-on-arch action is *very* slow, but is the only way to simulate arm64 architecture.
    linux-arm64:
        name: Linux (arm64)
        runs-on: ubuntu-22.04
        steps:
            - name: Clone Repository
              uses: actions/checkout@v3

            - name: Setup dependencies and compile natives
              uses: uraimo/run-on-arch-action@v2
              with:
                arch: aarch64
                distro: ubuntu22.04
                shell: /bin/sh
                githubToken: ${{ github.token }}
                setup: |
                  mkdir -p "${PWD}/artifacts/arm64"
                dockerRunArgs: |
                  --volume "${PWD}/artifacts:/artifacts"
                env: |
                  LUA_VERSION: ${{ env.LUA_VERSION }}
                install: |
                  apt-get update -q -y
                  apt-get install -y build-essential curl
                run: |
                  curl -s -L -O https://www.lua.org/ftp/lua-${LUA_VERSION}.tar.gz
                  tar xf lua-${LUA_VERSION}.tar.gz
                  cd lua-${LUA_VERSION}/src/
                  patch < ../../liblua.linux.patch
                  make liblua.so
                  cp liblua.so /artifacts/arm64/lua51.so

            - name: Upload Artifacts
              uses: actions/upload-artifact@v3
              with:
                name: Natives-Linux(arm64)
                path: ./artifacts
